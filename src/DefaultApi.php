<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Pica9\CampaignDrive\ApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Pica9\CampaignDrive\ApiClient;

use \Pica9\CampaignDrive\ApiClient\Configuration;
use \Pica9\CampaignDrive\ApiClient\ApiClient;
use \Pica9\CampaignDrive\ApiClient\ApiException;
use \Pica9\CampaignDrive\ApiClient\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Pica9\CampaignDrive\ApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     * @var \Pica9\CampaignDrive\ApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Pica9\CampaignDrive\ApiClient\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Pica9\CampaignDrive\ApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Pica9\CampaignDrive\ApiClient\ApiClient $apiClient set the API client
     * @return DefaultApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getDocumentById
     *
     * Fetch a document
     *
     * @param string $token Authentication Bearer Token (required)
     * @param int $document_id Id of document to retrieve (required)
     * @return \Pica9\CampaignDrive\ApiClient\Model\Document
     * @throws \Pica9\CampaignDrive\ApiClient\ApiException on non-2xx response
     */
    public function getDocumentById($token, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getDocumentByIdWithHttpInfo ($token, $document_id);
        return $response; 
    }


    /**
     * getDocumentByIdWithHttpInfo
     *
     * Fetch a document
     *
     * @param string $token Authentication Bearer Token (required)
     * @param int $document_id Id of document to retrieve (required)
     * @return Array of \Pica9\CampaignDrive\ApiClient\Model\Document, HTTP status code, HTTP response headers (array of strings)
     * @throws \Pica9\CampaignDrive\ApiClient\ApiException on non-2xx response
     */
    public function getDocumentByIdWithHttpInfo($token, $document_id)
    {
        
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling getDocumentById');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling getDocumentById');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/documents/{document_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($token !== null) {
            $headerParams['token'] = $this->apiClient->getSerializer()->toHeaderValue($token);
        }
        // path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "document_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Pica9\CampaignDrive\ApiClient\Model\Document'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Pica9\CampaignDrive\ApiClient\Model\Document', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Pica9\CampaignDrive\ApiClient\Model\Document', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Pica9\CampaignDrive\ApiClient\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Pica9\CampaignDrive\ApiClient\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createToken
     *
     * Fetch a new token
     *
     * @param string $grant_type The name of the Oauth grant used. Currently only \&quot;client_credentials\&quot; is supported (required)
     * @param string $client_id The Oauth client ID (required)
     * @param string $client_secret The Oauth client secret (required)
     * @param string $scope The scopes to associate with the token. The returned token will only be valid\nfor endpoints that require the scopes specified in this parameter. Multiple scopes\nshould be delimited by a space. (required)
     * @return \Pica9\CampaignDrive\ApiClient\Model\Token
     * @throws \Pica9\CampaignDrive\ApiClient\ApiException on non-2xx response
     */
    public function createToken($grant_type, $client_id, $client_secret, $scope)
    {
        list($response, $statusCode, $httpHeader) = $this->createTokenWithHttpInfo ($grant_type, $client_id, $client_secret, $scope);
        return $response; 
    }


    /**
     * createTokenWithHttpInfo
     *
     * Fetch a new token
     *
     * @param string $grant_type The name of the Oauth grant used. Currently only \&quot;client_credentials\&quot; is supported (required)
     * @param string $client_id The Oauth client ID (required)
     * @param string $client_secret The Oauth client secret (required)
     * @param string $scope The scopes to associate with the token. The returned token will only be valid\nfor endpoints that require the scopes specified in this parameter. Multiple scopes\nshould be delimited by a space. (required)
     * @return Array of \Pica9\CampaignDrive\ApiClient\Model\Token, HTTP status code, HTTP response headers (array of strings)
     * @throws \Pica9\CampaignDrive\ApiClient\ApiException on non-2xx response
     */
    public function createTokenWithHttpInfo($grant_type, $client_id, $client_secret, $scope)
    {
        
        // verify the required parameter 'grant_type' is set
        if ($grant_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grant_type when calling createToken');
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling createToken');
        }
        // verify the required parameter 'client_secret' is set
        if ($client_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_secret when calling createToken');
        }
        // verify the required parameter 'scope' is set
        if ($scope === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scope when calling createToken');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/token";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // form params
        if ($grant_type !== null) {
            
            
            $formParams['grant_type'] = $this->apiClient->getSerializer()->toFormValue($grant_type);
            
        }// form params
        if ($client_id !== null) {
            
            
            $formParams['client_id'] = $this->apiClient->getSerializer()->toFormValue($client_id);
            
        }// form params
        if ($client_secret !== null) {
            
            
            $formParams['client_secret'] = $this->apiClient->getSerializer()->toFormValue($client_secret);
            
        }// form params
        if ($scope !== null) {
            
            
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Pica9\CampaignDrive\ApiClient\Model\Token'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Pica9\CampaignDrive\ApiClient\Model\Token', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Pica9\CampaignDrive\ApiClient\Model\Token', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Pica9\CampaignDrive\ApiClient\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
